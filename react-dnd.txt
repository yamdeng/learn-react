### drag & drop ##

1.item, type

2.monitor
 -상태 추적

3.collect 함수를 통해서 상태를 좀 더 직관적인 속성으로 변경이 가능함

4.drag 또는 drop 할 대상을 react-dnd에서 관찰할 수 있도록 dom을 연결시켜야 함

5.드래그소스와 드랍타겟이라는 개념이 존재

6.라이브러리가 적용하는 backend-api가 react-dnd-html5-backend와 react-dnd-touch-backend 2개가 존재함

7.같은 시나리오안에 적용된 dnd를 아래의 컴포넌트로 감싼다
<DndProvider backend={HTML5Backend}></DndProvider>

8.제공하는 core hook
 -useDrag
 -useDrop
 -useDragLayer

9.useDrag
 -함수의 파라미터 값은 1.option object 2.의존성배열정보(생략시 기본적으로 추천하는 기본값이 적용됨) : 9-1.참고
 -함수의 반환값은 1.collect object 2.drag(ref연동할 함수) 3.dragPreview(ref연동할 함수)

9-1.useDrag 파라미터 상세
 -type(string / symbol)
 -item(object / function)
 -previewOptions(object)  
 -options(object)
  : dropEffect
 -end(item, monitor)
 -canDrag(monitor) : 생략시 항상 가능
 -isDragging(monitor)
 -collect

10.useDrop
 -함수의 파라미터 값은 1.option object 2.의존성배열정보(생략시 기본적으로 추천하는 기본값이 적용됨) : 10-1.참고
 -함수의 반환값은 1.collect object 2.drop(ref연동할 함수)

10-1.useDrop 파라미터 상세
 -accept : drop을 허용할 타입을 정의한다. 생략가능하며 string, symbol 배열이다
 -options : 일반 객체
 -drop(item, monitor) : 허용한 item이 대상에 떨어졌을때 호출
  : 일반 객체를 반환하며 useDrag의 end 함수의 monitor의 monitor.getDropResult()로 사용할 수 있다
  : canDrop()이 정의되고 false를 반환하는 경우 이 메서드는 호출되지 않는다
 -hover(item, monitor) : drag item이 drop으로 설정된 아이템에 hover가 됬을 경우 호출됨
  : monitor.isOver({shallow: true })를 확인하여 호버가 현재 대상 위에서만 발생하는지 아니면 중첩된 대상 위에서 발생하는지 테스트할 수 있다
  : drop()과 달리 이 메서드는 canDrop()이 정의되어 false를 반환하더라도 호출된다(monitor.canDrop()을 확인하여 이것이 사실인지 테스트할 수 있다)
 -canDrop(item, monitor) : drop을 항상 허용시 생략하면 된다
  : 일반적으로 monitor.getItem() 을 이용하여 상세 조건을 확인한다
 -collect

11.useDragLayer

12.DragSourceMonitor : 드래그 소스의 수집 기능에 전달되는 객체(드래그 소스의 드래그 상태 정보 확인)
 -canDrag()
 -isDragging()
 -getItemType()
 -getItem()
 -getDropResult() : end()에서 활용해야 할듯
 -didDrop() : end()에서 활용해야 할듯
 -getInitialClientOffset(): 현재 드래그 작업이 시작된 시점의 포인터의 { x, y } 클라이언트 오프셋을 반환
 -getInitialSourceClientOffset(): 현재 드래그 작업이 시작된 시점의 드래그 소스 컴포넌트 루트 DOM 노드의 { x, y } 클라이언트 오프셋을 반환
 -getClientOffset(): 드래그 작업이 진행되는 동안 포인터의 마지막으로 기록된 { x, y } 클라이언트 오프셋을 반환
 -getDifferenceFromInitialOffset(): 포인터의 마지막으로 기록된 클라이언트 오프셋과 현재 드래그 작업이 시작되었을 때 클라이언트 오프셋 간의 { x, y } 차이를 반환
 -getSourceClientOffset(): 현재 드래그 작업이 시작된 시점의 위치와 이동 차이를 기반으로 드래그 소스 컴포넌트의 루트 DOM 노드의 투영된 { x, y } 클라이언트 오프셋을 반환

13.DropTargetMonitor : 드롭 대상의 수집 기능에 전달되는 객체(특정 놓기 대상의 끌기 상태에 대한 정보를 얻을 수 있음)
 -canDrop()
 -isOver(options)
 -getItemType()
 -getItem()
 -getDropResult()
 -didDrop()
 -getInitialClientOffset(): 동일
 -getInitialSourceClientOffset(): 동일
 -getClientOffset(): 동일
 -getDifferenceFromInitialOffset(): 동일
 -getSourceClientOffset(): 동일

14.DragLayerMonitor
 -isDragging()
 -getItemType()
 -getItem()
 -getInitialClientOffset(): 동일
 -getInitialSourceClientOffset(): 동일
 -getClientOffset(): 동일
 -getDifferenceFromInitialOffset(): 동일
 -getSourceClientOffset(): 동일

### react-dnd checklist ###

 1.DragPreviewImage 확인 필요 : <https://react-dnd.github.io/react-dnd/docs/api/drag-preview-image>

 2.ref={dragPreview}, ref={drag} 같이 적용하는 이유는?

 3.useDrag 함수의 파라미터로 function을 부여하고 null을 반환하는 경우 체크

 4.useDrag 함수의 파라미터로 item을 효율적으로 어떤 값을 주어야하는지 확인 필요

 5.useDrag 함수의 파라미터 중 previewOptions, options 용도 체크

 6.useDrag 함수의 파라미터 중 end(item, monitor) 확인 필요 : 시나리오 확인

 7.useDrag 함수의 파라미터 중 canDrag(monitor) : 활용도 확인 필요

 8.useDrag 함수의 파라미터 중 isDragging(monitor) : 활용도 확인 필요
  -기타로 각 함수의 monitor 가 어떤 객체인지 확인

 9.useDrag 함수의 파라미터 중 collect의 매개변수 spec 체크

 10.useDrop 함수의 파라미터 중 accept를 생략하면 모든 것을 허용?

 11.useDrop 함수의 파라미터 중 options의 용도는?

 12.useDrop 함수의 파라미터 drop(item, monitor) : 허용한 item이 대상에 떨어졌을때 호출
  : 일반 객체를 반환하며 useDrag의 end 함수의 monitor의 monitor.getDropResult()로 사용할 수 있다

 13.useDrop.drop(item, monitor)와 monitor.didDrop() 및 monitor.getDropResult 활용도 체크

 14.hover(item, monitor) : drag item이 drop으로 설정된 아이템에 hover가 됬을 경우 호출됨
  : monitor.isOver({shallow: true })를 확인하여 호버가 현재 대상 위에서만 발생하는지 아니면 중첩된 대상 위에서 발생하는지 테스트할 수 있다
  : drop()과 달리 이 메서드는 canDrop()이 정의되어 false를 반환하더라도 호출된다(monitor.canDrop()을 확인하여 이것이 사실인지 테스트할 수 있다)

15.canDrop(item, monitor) : drop을 항상 허용시 생략하면 된다
  : 일반적으로 monitor.getItem() 을 이용하여 상세 조건을 확인한다

16.useDrag의 collect와 useDrop의 collect의 활용도 차이 체크

17.useDragLayer 활용도 체크

18.DragSourceMonitor의 메서드 활용도 전체 체크

19.DropTargetMonitor의 메서드 활용도 전체 체크

20.DragLayerMonitor의 메서드 활용도 전체 체크
